version: "3.8"

services:
  admin_service:
    build: ./backend
    command:
      - dist/src/main
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=pg
      - REDIS_HOST=redis
    ports:
      - "3000:3000"
    links:
      - pg
      - redis
    depends_on:
      init-db:
          condition: service_completed_successfully

  collector_service:
    build: ./backend
    command:
      - dist/src/scheduler
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=pg
      - REDIS_HOST=redis
    links:
      - pg
      - redis
    depends_on:
      init-db:
          condition: service_completed_successfully

  frontend_service:
    build: ./frontend
    ports:
      - "3001:3000"
    environment:
      - WDS_SOCKET_PORT=0
    depends_on:
      - admin_service

  pg:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    links:
      - admin_service
      - collector_service

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    links:
      - prometheus
      - pg
  
  init-db:
    build: ./backend
    entrypoint: /bin/bash -c "npx prisma migrate deploy"
    environment:
      - POSTGRES_HOST=pg
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      pg:
        condition: service_started
volumes:
  db_data:
